// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts@4.7.1/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts@4.7.1/access/Ownable.sol";
import "@openzeppelin/contracts@4.7.1/token/ERC1155/extensions/ERC1155Supply.sol";
import "@openzeppelin/contracts@4.7.1/utils/Strings.sol";

/// @custom:security-contact gg.code.latam@gmail.com
contract MineraliumSupports is ERC1155, Ownable, ERC1155Supply {
    uint public constant NFT0 = 0;
    uint public constant NFT1 = 1;
    uint public constant NFT2 = 2;

    event Donation(address indexed _from, uint256 time, uint _value);

    uint256 public totalRaised = 0 ether;

    address contractBeneficiary;


    constructor(address beneficiary) ERC1155("ipfs://QmXpm1FR1T5No4QrJtYTvpwz3cwFc3bVurHN25J9nX7D1X/") {
        contractBeneficiary = beneficiary;
    }

    function setURI(string memory newuri) public onlyOwner {
        _setURI(newuri);
    }

    function withdraw() external onlyOwner {
        uint256 balance = address(this).balance;
        payable(contractBeneficiary).transfer(balance);
    }

    function mint() public payable {
        require(msg.value >= 0.5 ether, "The minimum price of these NFT is 0.5 ether");

        if(msg.value == 0.5 ether){
            _mint(msg.sender, NFT0, 1, "");
        }

        if(msg.value == 1 ether){
            _mint(msg.sender, NFT1, 1, "");
        }
        if(msg.value == 2 ether){
            _mint(msg.sender, NFT2, 1, "");
        }
        
        totalRaised += msg.value;
        emit Donation(msg.sender, block.timestamp, msg.value);

        // if you donate 0.5 ETH = 1st NFT
        // if you donate 1 ETH = 2nd NFT
        // if you donate 2 ETH = 3rd NFT
    }

    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)
        public
        onlyOwner
    {
        _mintBatch(to, ids, amounts, data);
    }

    // The following functions are overrides required by Solidity.

    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)
        internal
        override(ERC1155, ERC1155Supply)
    {
        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);
    }

    function uri(uint256 _id) public view override returns (string memory) {
        require(exists(_id), "URI: nonexistent token");

        return string(abi.encodePacked(super.uri(_id), Strings.toString(_id), ".json"));
    }
}
